digraph "call-graph" {
    "<testers.CallGraphs: void main(java.lang.String[])>"
    "<testers.CallGraphs: void doStuff()>"
    "<testers.CallGraphs: void main(java.lang.String[])>"->"<testers.CallGraphs: void doStuff()>";
    "<testers.A: void <init>()>"
    "<testers.CallGraphs: void main(java.lang.String[])>"->"<testers.A: void <init>()>";
    "<testers.A: void baz()>"
    "<testers.CallGraphs: void main(java.lang.String[])>"->"<testers.A: void baz()>";
    "<testers.CallGraphs: void doStuff()>"->"<testers.A: void <init>()>";
    "<testers.A: void foo()>"
    "<testers.CallGraphs: void doStuff()>"->"<testers.A: void foo()>";
    "<testers.B: void <init>()>"
    "<testers.CallGraphs: void doStuff()>"->"<testers.B: void <init>()>";
    "<testers.B: void method1()>"
    "<testers.CallGraphs: void doStuff()>"->"<testers.B: void method1()>";
    "<testers.B: void method2()>"
    "<testers.CallGraphs: void doStuff()>"->"<testers.B: void method2()>";
    "<testers.C: void <init>()>"
    "<testers.CallGraphs: void doStuff()>"->"<testers.C: void <init>()>";
    "<testers.C: void methodA()>"
    "<testers.CallGraphs: void doStuff()>"->"<testers.C: void methodA()>";
    "<testers.D: void <init>()>"
    "<testers.CallGraphs: void doStuff()>"->"<testers.D: void <init>()>";
    "<testers.D: void methodB()>"
    "<testers.CallGraphs: void doStuff()>"->"<testers.D: void methodB()>";
    "<testers.A: void bar()>"
    "<testers.A: void foo()>"->"<testers.A: void bar()>";
    "<testers.A: void foo()>"->"<testers.C: void <init>()>";
    "<testers.A: void foo()>"->"<testers.C: void methodA()>";
    "<testers.C: void methodA()>"->"<testers.B: void <init>()>";
    "<testers.C: void methodA()>"->"<testers.B: void method1()>";
    "<testers.A: void bar()>"->"<testers.D: void <init>()>";
    "<testers.A: void bar()>"->"<testers.D: void methodB()>";
}
